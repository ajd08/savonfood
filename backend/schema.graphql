"""All input for the create `Item` mutation."""
input CreateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Item` to be created by this mutation."""
  item: ItemInput!
}

"""The output of our create `Item` mutation."""
type CreateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was created by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Store` that is related to this `Item`."""
  store: Store

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge
}

"""All input for the create `Store` mutation."""
input CreateStoreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Store` to be created by this mutation."""
  store: StoreInput!
}

"""The output of our create `Store` mutation."""
type CreateStorePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Store` that was created by this mutation."""
  store: Store

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Store`. May be used by Relay 1."""
  storeEdge(
    """The method to use when ordering `Store`."""
    orderBy: [StoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoresEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

"""All input for the `deleteItemByNodeId` mutation."""
input DeleteItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteItem` mutation."""
input DeleteItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Item` mutation."""
type DeleteItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was deleted by this mutation."""
  item: Item
  deletedItemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Store` that is related to this `Item`."""
  store: Store

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge
}

"""All input for the `deleteStoreByNodeId` mutation."""
input DeleteStoreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Store` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteStore` mutation."""
input DeleteStoreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Store` mutation."""
type DeleteStorePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Store` that was deleted by this mutation."""
  store: Store
  deletedStoreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Store`. May be used by Relay 1."""
  storeEdge(
    """The method to use when ordering `Store`."""
    orderBy: [StoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoresEdge
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

type Item implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String
  category: String
  price: String
  startDate: Date
  endDate: Date
  storeId: Int

  """Reads a single `Store` that is related to this `Item`."""
  store: Store
}

"""
A condition to be used against `Item` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `category` field."""
  category: String

  """Checks for equality with the object’s `price` field."""
  price: String

  """Checks for equality with the object’s `startDate` field."""
  startDate: Date

  """Checks for equality with the object’s `endDate` field."""
  endDate: Date

  """Checks for equality with the object’s `storeId` field."""
  storeId: Int
}

"""
A filter to be used against `Item` object types. All fields are combined with a logical ‘and.’
"""
input ItemFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `category` field."""
  category: StringFilter

  """Filter by the object’s `price` field."""
  price: StringFilter

  """Filter by the object’s `startDate` field."""
  startDate: DateFilter

  """Filter by the object’s `endDate` field."""
  endDate: DateFilter

  """Filter by the object’s `storeId` field."""
  storeId: IntFilter

  """Checks for all expressions in this list."""
  and: [ItemFilter!]

  """Checks for any expressions in this list."""
  or: [ItemFilter!]

  """Negates the expression."""
  not: ItemFilter
}

"""An input for mutations affecting `Item`"""
input ItemInput {
  id: Int
  title: String
  category: String
  price: String
  startDate: Date
  endDate: Date
  storeId: Int
}

"""Represents an update to a `Item`. Fields that are set will be updated."""
input ItemPatch {
  id: Int
  title: String
  category: String
  price: String
  startDate: Date
  endDate: Date
  storeId: Int
}

"""A connection to a list of `Item` values."""
type ItemsConnection {
  """A list of `Item` objects."""
  nodes: [Item!]!

  """
  A list of edges which contains the `Item` and cursor to aid in pagination.
  """
  edges: [ItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int!
}

"""A `Item` edge in the connection."""
type ItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Item` at the end of the edge."""
  node: Item!
}

"""Methods to use when ordering `Item`."""
enum ItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  PRICE_ASC
  PRICE_DESC
  START_DATE_ASC
  START_DATE_DESC
  END_DATE_ASC
  END_DATE_DESC
  STORE_ID_ASC
  STORE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Item`."""
  createItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemInput!
  ): CreateItemPayload

  """Creates a single `Store`."""
  createStore(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStoreInput!
  ): CreateStorePayload

  """Updates a single `Item` using its globally unique id and a patch."""
  updateItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemByNodeIdInput!
  ): UpdateItemPayload

  """Updates a single `Item` using a unique key and a patch."""
  updateItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemInput!
  ): UpdateItemPayload

  """Updates a single `Store` using its globally unique id and a patch."""
  updateStoreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStoreByNodeIdInput!
  ): UpdateStorePayload

  """Updates a single `Store` using a unique key and a patch."""
  updateStore(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStoreInput!
  ): UpdateStorePayload

  """Deletes a single `Item` using its globally unique id."""
  deleteItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemByNodeIdInput!
  ): DeleteItemPayload

  """Deletes a single `Item` using a unique key."""
  deleteItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemInput!
  ): DeleteItemPayload

  """Deletes a single `Store` using its globally unique id."""
  deleteStoreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStoreByNodeIdInput!
  ): DeleteStorePayload

  """Deletes a single `Store` using a unique key."""
  deleteStore(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStoreInput!
  ): DeleteStorePayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection

  """Reads and enables pagination through a set of `Store`."""
  stores(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Store`."""
    orderBy: [StoresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StoreFilter
  ): StoresConnection
  item(id: Int!): Item
  store(id: Int!): Store

  """Reads a single `Item` using its globally unique `ID`."""
  itemByNodeId(
    """The globally unique `ID` to be used in selecting a single `Item`."""
    nodeId: ID!
  ): Item

  """Reads a single `Store` using its globally unique `ID`."""
  storeByNodeId(
    """The globally unique `ID` to be used in selecting a single `Store`."""
    nodeId: ID!
  ): Store
}

type Store implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  companyName: String!
  name: String!
  streetName: String!
  city: String!
  province: String!
  postalCode: String!

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): ItemsConnection!
}

"""
A condition to be used against `Store` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input StoreCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `companyName` field."""
  companyName: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `streetName` field."""
  streetName: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `province` field."""
  province: String

  """Checks for equality with the object’s `postalCode` field."""
  postalCode: String
}

"""
A filter to be used against `Store` object types. All fields are combined with a logical ‘and.’
"""
input StoreFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `companyName` field."""
  companyName: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `streetName` field."""
  streetName: StringFilter

  """Filter by the object’s `city` field."""
  city: StringFilter

  """Filter by the object’s `province` field."""
  province: StringFilter

  """Filter by the object’s `postalCode` field."""
  postalCode: StringFilter

  """Checks for all expressions in this list."""
  and: [StoreFilter!]

  """Checks for any expressions in this list."""
  or: [StoreFilter!]

  """Negates the expression."""
  not: StoreFilter
}

"""An input for mutations affecting `Store`"""
input StoreInput {
  id: Int
  companyName: String!
  name: String!
  streetName: String!
  city: String!
  province: String!
  postalCode: String!
}

"""
Represents an update to a `Store`. Fields that are set will be updated.
"""
input StorePatch {
  id: Int
  companyName: String
  name: String
  streetName: String
  city: String
  province: String
  postalCode: String
}

"""A connection to a list of `Store` values."""
type StoresConnection {
  """A list of `Store` objects."""
  nodes: [Store!]!

  """
  A list of edges which contains the `Store` and cursor to aid in pagination.
  """
  edges: [StoresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Store` you could get from the connection."""
  totalCount: Int!
}

"""A `Store` edge in the connection."""
type StoresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Store` at the end of the edge."""
  node: Store!
}

"""Methods to use when ordering `Store`."""
enum StoresOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COMPANY_NAME_ASC
  COMPANY_NAME_DESC
  NAME_ASC
  NAME_DESC
  STREET_NAME_ASC
  STREET_NAME_DESC
  CITY_ASC
  CITY_DESC
  PROVINCE_ASC
  PROVINCE_DESC
  POSTAL_CODE_ASC
  POSTAL_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""All input for the `updateItemByNodeId` mutation."""
input UpdateItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  patch: ItemPatch!
}

"""All input for the `updateItem` mutation."""
input UpdateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  patch: ItemPatch!
  id: Int!
}

"""The output of our update `Item` mutation."""
type UpdateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was updated by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Store` that is related to this `Item`."""
  store: Store

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ItemsEdge
}

"""All input for the `updateStoreByNodeId` mutation."""
input UpdateStoreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Store` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Store` being updated.
  """
  patch: StorePatch!
}

"""All input for the `updateStore` mutation."""
input UpdateStoreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Store` being updated.
  """
  patch: StorePatch!
  id: Int!
}

"""The output of our update `Store` mutation."""
type UpdateStorePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Store` that was updated by this mutation."""
  store: Store

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Store`. May be used by Relay 1."""
  storeEdge(
    """The method to use when ordering `Store`."""
    orderBy: [StoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoresEdge
}
